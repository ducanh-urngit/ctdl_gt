#include "graphics.h"
#include <dos.h>
#include <stdio.h>
#include <conio.h>

char in[] = "circle list (insert)";
char out[] = "circle list (delete)";
char done[] = "circle list (finish)";
char A[] = "1";
char B[] = "2";
char C[] = "3";
char D[] = "4";
char t[] = ".";

void reset()
{
	system("cls");
	outtextxy(400, 50, in);
}
void resetout()
{
	system("cls");
	outtextxy(400, 50, out);
}
void resetdone()
{
	system("cls");
	outtextxy(400, 50, done);
}

void before()
{
	int x = 18;

	square(20, 490, 35);
	square(20 + 60, 490, 35);
	square(20 + 60 * 2, 490, 35);
	square(20 + 60 * 3, 490, 35);

	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);
	outtextxy(x + 45 * 2, 240, C);
	outtextxy(x + 44 * 3, 240, D);

}
void after()
{
	int d = 100, r = 50;

	drawnode(700, 200);
	drawnode(300, 200);
	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235 + 145 * 2, 100, A);
	outtextxy(235, 100, B);
	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(500 + d - 15, 200 + 25, 700, 200 + 25);
	drawarrow(700 + d - 15, 200 + 25, 900, 200 + 25);
	
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}

void keepexceptA()
{
	int d = 100;
	outtextxy(235, 100, B);
	drawnode(300, 200);

	outtextxy(235 + 145 * 3, 100, C);
	drawnode(900, 200);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);

}
void keepexceptB()
{
	int x = 18, d = 100;
	outtextxy(x, 240, A);
	square(20, 490, 35);

	outtextxy(235 + 145 * 3, 100, C);
	drawnode(900, 200);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);

	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
	drawarrow(300 + d + 20, 200 + 25, 500, 200 + 25);
	
	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 + d + 20, 350);
	line(300 + d + 20, 350, 300 + d + 20, 200 + 25);
}
void keepexceptC()
{
	int x = 18;
	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);

	square(20, 490, 35);
	square(20 + 60, 490, 35);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);
}
void keepexceptD()
{
	int x = 18;

	square(20, 490, 35);
	square(20 + 60, 490, 35);
	square(20 + 60 * 2, 490, 35);

	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);
	outtextxy(x + 45 * 2, 240, C);
}

void keepexceptAout()
{
	int d = 100, r = 50;

	drawnode(300, 200);
	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235, 100, B);
	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(500 + d - 15, 200 + 25, 700, 200 + 25);
	drawarrow(700 + d - 15, 200 + 25, 900, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}
void keepexceptBout()
{
	int d = 100, r = 50;

	outtextxy(18, 240, A);
	square(20, 490, 35);

	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}
void keepexceptCout()
{
	int d = 100, r = 50;
	int x = 18;
	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);

	square(20, 490, 35);
	square(20 + 60, 490, 35);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);

	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
	drawarrow(300 + d + 20, 200 + 25, 500, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 + d + 20, 350);
	line(300 + d + 20, 350, 300 + d + 20, 200 + 25);
}
void keepexceptDout()
{
	int d = 100, r = 50;
	int x = 18;
	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);

	square(20, 490, 35);
	square(20 + 60, 490, 35);

	square(20 + 60 * 2, 490, 35);
	outtextxy(x + 45 * 2, 240, C);

}

void keepexcept4cn3()
{
	int x = 18;
	outtextxy(x, 240, A);
	outtextxy(x + 45 * 1, 240, B);

	square(20, 490, 35);
	square(20 + 60, 490, 35);

	outtextxy(235 + 145 * 3, 100, C);
	drawnode(900, 200);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);
}
void keepexcept3cn4()
{
	int d = 100;
	keepexcept4cn3();
	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
}
void keepexcept2cn4()
{
	int x = 18, d = 100;
	outtextxy(x, 240, A);
	square(20, 490, 35);

	outtextxy(235, 100, B);
	drawnode(300, 200);

	outtextxy(235 + 145 * 3, 100, C);
	drawnode(900, 200);

	outtextxy(235 + 145, 100, D);
	drawnode(500, 200);

	drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
}
void keepexcept4cn3discn1()
{
	int d = 100;
	drawnode(700, 200);
	drawnode(300, 200);
	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235 + 145 * 2, 100, A);
	outtextxy(235, 100, B);
	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}
void keepexcept3cn1()
{
	int d = 100;
	drawnode(700, 200);
	drawnode(300, 200);
	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235 + 145 * 2, 100, A);
	outtextxy(235, 100, B);
	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(500 + d - 15, 200 + 25, 700, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}

void keepexcept4cn3out()
{
	int d = 100, r = 50;

	outtextxy(18, 240, A);
	square(20, 490, 35);

	drawnode(300, 200);
	drawnode(900, 200);
	drawnode(500, 200);

	outtextxy(235, 100, B);
	outtextxy(235 + 145 * 3, 100, C);
	outtextxy(235 + 145, 100, D);

	drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);
	drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

	line(900 + d - 15, 200 + 25, 1050, 200 + 25);
	line(1050, 200 + 25, 1050, 350);
	line(1050, 350, 300 - 40, 350);
	line(300 - 40, 350, 300 - 40, 200 + 25);
}

void moveAup()
{
	int a;
	for (float i = 0; i <= 1000; i += 0.07)
	{
		keepexceptA();
		a = 240 - i;
		if (a >= 100)
			outtextxy(253 + 145 * 2, a, A);
		else
			break;
	}
}
void moveBup()
{
	int a;
	for (float i = 0; i <= 1000; i += 0.07)
	{
		keepexceptB();
		a = 240 - i;
		if (a >= 100)
			outtextxy(253, a, B);
		else
			break;
	}
}
void moveCup()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.07)
	{
		keepexceptC();
		a = 240 - i;
		if (a >= 100)
			outtextxy(253 + 145 * 3, a, C);
		else
			break;
	}
}
void moveDup()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.05)
	{
		keepexceptD();
		a = 240 - i;
		if (a >= 100)
			outtextxy(253 + 145, a, D);
		else
			break;
	}
}

void moveAdown()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.08)
	{
		keepexceptAout();
		a = 100 + i;
		if (a <= 240)
			outtextxy(235 + 145 * 2, a, A);
		else
			break;
	}
}
void moveBdown()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.08)
	{
		keepexceptBout();
		a = 100 + i;
		if (a <= 240)
			outtextxy(235, a, B);
		else
			break;
	}
}
void moveCdown()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.07)
	{
		keepexceptCout();
		a = 100 + i;
		if (a <= 240)
			outtextxy(235 + 145 * 3, a, C);
		else
			break;
	}
}
void moveDdown()
{
	int a;

	for (float i = 0; i <= 1000; i += 0.05)
	{
		keepexceptDout();
		a = 100 + i;
		if (a <= 240)
			outtextxy(235 + 145, a, D);
		else
			break;
	}
}

void connect34()
{
	reset();
	int d = 100, r = 50;
	float b = 900 + d - 15;
	float c = 200 + 25;
	float e = 1050;
	float f = 350;
	float g = 300 + d + 20;
	float i = 0;
	while (true)
	{
		keepexcept3cn4();
		b += i; c += i; e -= 0.1; f -= i; g += i;
		if (b <= 1050) line(900 + d - 15, 200 + 25, b, 200 + 25);
		else line(900 + d - 15, 200 + 25, 1050, 200 + 25);

		if (c <= 350) line(1050, 200 + 25, 1050, c);
		else line(1050, 200 + 25, 1050, 350);

		if (e >= 300 + d + 20) line(1050, 350, e, 350);
		else line(1050, 350, 300 + d + 20, 350);

		if (f >= 200 + 25) line(300 + d + 20, 350, 300 + d + 20, f);
		else line(300 + d + 20, 350, 300 + d + 20, 200 + 25);

		if (g <= 500) line(300 + d + 20, 200 + 25, g, 200 + 25);
		else drawarrow(300 + d + 20, 200 + 25, 500, 200 + 25);

		if (b > 1050 && c > 350 && e < 300 + d + 20 && f < 200 + 25 && g > 500)
		{
			break;
		}
		i += 0.00001;
	}
}
void connect43()
{
	reset();
	int d = 100, r = 50;
	float a = 500 + d - 15;
	float i = 0;
	while (true)
	{
		keepexcept4cn3();
		a += i;
		if (a <= 900) line(500 + d - 15, 200 + 25, a, 200 + 25);
		else drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
		if (a > 900)
		{
			break;
		}
		i += 0.00001;
	}
	connect34();
}
void connect24()
{
	reset();
	int d = 100, r = 50;
	float a = 300 + d - 15;
	float b = 1050;
	float c = 350;
	float e = 300 - 40;
	float i = 0;
	while(true)
	{
		keepexcept2cn4();
		a += i; b -= 0.2; c -= i; e += i;
		if (a <= 500) line(300 + d - 15, 200 + 25, a, 200 + 25);
		else drawarrow(300 + d - 15, 200 + 25, 500, 200 + 25);

		if (b >= 300 - 40) line(1050, 350, b, 350);
		else line(1050, 350, 300 - 40, 350);

		if (c >= 200 + 25) line(300 - 40, 350, 300 - 40, c);
		else line(300 - 40, 350, 300 - 40, 200 + 25);

		if (e <= 300)	line(300 - 40, 200 + 25, e, 200 + 25);
		else drawarrow(300 - 40, 200 + 25, 300, 200 + 25);

		if(a > 500 && b < 300-40 && c < 350 && e > 300)
		{
			break;
		}
		i += 0.00002;
	}
}
void connect413()
{
	reset();
	int d = 100, r = 50;
	float a = 500 + d - 15;
	float b = 700 + d - 15;
	float i = 0;
	while(true)
	{
		keepexcept4cn3discn1();
		a += i; b += i;
		if (a <= 700) line(500 + d - 15, 200 + 25, a, 200 + 25);
		else
		{
			drawarrow(500 + d - 15, 200 + 25, 700, 200 + 25);
			break;
		}
		i += 0.0001;
	}

	a = 700 + d - 15;
	i = 0;
	while(true)
	{
		keepexcept3cn1();
		a += i;
		if (a <= 900)
			line(700 + d - 15, 200 + 25, a, 200 + 25);
		else
		{
			drawarrow(700 + d - 15, 200 + 25, 900, 200 + 25);
			break;
		}
		i += 0.0001;
	}
}

void reconnect43()
{
	reset();
	int d = 100, r = 50;
	float a = 500 + d - 15;
	for (float i = 0; i < 100000000; i += 0.0001)
	{
		keepexcept4cn3out();
		a += i;
		if (a <= 900)
			line(500 + d - 15, 200 + 25, a, 200 + 25);
		else
		{
			drawarrow(500 + d - 15, 200 + 25, 900, 200 + 25);
			break;
		}
	}
}

void move()
{
	reset();
	int x = 18, a;

	for (float i = 0; i <= 400; i += 0.04)
	{
		keepexceptD();

		a = x + 44 * 3 + i;
		if (a <= 235 + 145)
			outtextxy(a, 240, D);
		else
		{
			moveDup();
			break;
		}
	}

	reset();
	for (float i = 0; i <= 1000; i += 0.05)
	{
		keepexceptC();

		a = x + 45 * 2 + i;
		if (a <= 235 + 145 * 3)
			outtextxy(a, 240, C);
		else
		{
			moveCup();
			break;
		}
	}
	connect43();

	reset();
	for (float i = 0; i <= 400; i += 0.05)
	{
		keepexceptB();

		a = x + 45 + i;
		if (a <= 235)
			outtextxy(a, 240, B);
		else
		{
			moveBup();
			break;
		}
	}
	connect24();

	reset();
	for (float i = 0; i <= 10000; i += 0.07)
	{
		keepexceptA();

		a = x + i;
		if (a <= 235 + 145 * 2)
			outtextxy(a, 240, A);
		else
		{
			moveAup();
			break;
		}
	}
	connect413();
}
void moveback()
{
	int x = 235, a;
	resetout();
	moveAdown();
	for (float i = 0; i <= 500; i += 0.08)
	{
		keepexceptAout();

		a = x + 145 * 2 - i;
		if (a >= 18)
			outtextxy(a, 240, A);
		else
			break;
	}
	reconnect43();

	resetout();
	moveBdown();
	for (float i = 0; i <= 500; i += 0.08)
	{
		keepexceptBout();

		a = x - i;
		if (a >= 18 + 45)
			outtextxy(a, 240, B);
		else
			break;
	}
	connect34();

	resetout();
	moveCdown();
	for (float i = 0; i <= 1000; i += 0.07)
	{
		keepexceptCout();

		a = x + 145 * 3 - i;
		if (a >= 18 + 45 * 2)
			outtextxy(a, 240, C);
		else
			break;
	}

	resetout();
	moveDdown();
	for (float i = 0; i <= 1000; i += 0.04)
	{
		keepexceptDout();

		a = x + 145 - i;
		if (a >= 18 + 44 * 3)
			outtextxy(a, 240, D);
		else
			break;
	}
}

void CircleListSimulation()
{
	int i = 0;
	reset();
	while (i != 10000)
	{
		before();
		i++;
	}
	move();

	resetout();
	i = 0;
	while (i != 8000)
	{
		after();
		i++;
	}
	moveback();

	resetdone();
	i = 0;
	while (i != 10000)
	{
		before();
		i++;
	}
}

int main()
{
	char ini[] = "C:\\TURBOC3\\BGI";
	initgraph();

	CircleListSimulation();

	return 0;
}
